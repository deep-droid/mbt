# Custom macro for code assist used by mScript editor
# The macros are defined with code=value on each row
# For control chars: \\n for \n, \\t for \t
# Example: 
# m1=<action code="$click('mybtn')"/>\\n<log msg="test msg"/>
# 
#m1=<action code=$click("mybtn")/>\\n\\t\\t<log msg="test msg"/>\\n

Action_Code_Select_Option_Parameterized=<!--This code assists when trying to make a selection from inside a list of options.  The first $getData() identifies the list the second $getData() identifies the list that determines which value to actually select -->\\n<action Code="$selectOption('$getData('your_dataset_name','header_name_of_column_within_dataset')','value=$getData('your_dataset_name','header_name_of_column_within_dataset')')"/>\\n@tooltip:Action_Code_Select_Option_Parameterized - This code assists when trying to make a selection from inside a list of options\\n
Assert_Hard_Coded_General=<!--This Assert is used primarily for hardcoded requirement verification, in test case generation only models. Nothing outside the passed="" statement is relevant -->\\n<assert value1="" op="" value2="" tags="" else="" passed="Enter your Requirements or text details here $addTagCheck('PriorityLevel:RequirementID','Pass','mmm')"/>\\n@tooltip:Assert_Hard_Coded - This Assert is used primarily for hardcoded requirement verification. In test case generation only models nothing outside the passed="" statement is relevant
Assert_Hard_Coded_TestCase=<!--This Assert is used for creating a TestCase-->\\n<assert value1="" op="eq" value2="" tags="" else="" passed="Enter your Requirements or text details here $addTagCheck('PriorityLevel:Requirement ID','Pass','mmm')"/>\\n@tooltip:Assert_Hard_Coded - This Assert is used for creating a TestCase
Connection_String=<!--This connection string establishes the connection between your excel work book and the TestOptimal database used internally to provide the dataset in question -->\\n<db connectionstring="jdbc:odbc:xlsyour_excel_workbook_name" driverclass="sun.jdbc.odbc.JdbcOdbcDriver" id="xlsJDBC" user="" password=""/>\\n@tooltip:Connection_String - This connection string establishes the connection between your excel work book and the TestOptimal database used internally to provide the dataset in question
Click_Parameterized=<!--The following provides for clicking on a control where the value of the control element ID or Xpath or other such means as class etc. is obtained from a dataset your_dataset_name, which should have been declared with a dataset (see Establish_Connected_Dataset) statement prior to its use here, and the actual control value is defined in the column within your_dataset_name called header_name_of_column_within_dataset-->\\n<action code="$click('$getData('your_dataset_name','header_name_of_column_within_dataset')')"/>\\n@tooltip:Click_Parameterized - The following provides for clicking on a control where the value of the control element ID or Xpath or other such means as class etc. is obtained from a dataset your_dataset_name, which should have been declared with a dataset (see Establish_Connected_Dataset) statement prior to its use here, and the actual control value is defined in the column within your_dataset_name called header_name_of_column_within_dataset
Dataset=<!--The following establishes the individual dataset ID's, each dataset may have multiple data sheets, this code ensures that each sheet is identified with a unique dataset, ensures that the dataset rewinds automatically when it reaches the last row and it ensures that the data so contained within this data sheet is written to the TestOptimal internal database which for standardization has been defined as xlsJDBC-->\\n<dataset id="your data sheet name" autorewind="true" mode="replace" db="xlsJDBC">\\n<!--The following directs TestOptimal to read from the specified data sheet-->\\n<sql>select * from [your data sheet name with a suffix $ symbol]</sql>\\n<!--The following terminates the dataset tag-->\\n</dataset>\\n<!--The following directs TestOptimal to load into the internal database from the specified data sheet-->\\n<action code="$loadFromDataSource('your data sheet name')"/>\\n<!--The following directs TestOptimal to rewind the dataset in-order to start from row zero (0) of the internal database from the specified data sheet at model start-up-->\\n<action code="$rewindDataSet('your data sheet name')"/>\\n@tooltip:Dataset - This establishes the individual dataset IDs. This code ensures that each sheet is identified with a unique dataset, ensures that the dataset rewinds automatically when it reaches the last row and it ensures that the data so contained within this data sheet is written to the TestOptimal internal database\\n
GetData_Parameterized=<!--The following provides for a Get action where the value of the location of the element being defined by ID or Xpath or other such means as class etc. is obtained from a dataset your_dataset_name, which should have been declared with a dataset (see Establish_Connected_Dataset) statement prior to its use here, and the actual element location value is defined in the column within your_dataset_name called header_name_of_column_within_dataset-->\\n<action code="$getData('your_dataset_name','header_name_of_column_within_dataset')"/>\\n@tooltip:GetData_Parameterized - The following provides for a Get action where the value of the location of the element being defined by ID or Xpath or other such means as class etc. is obtained from a dataset your_dataset_name, which should have been declared with a dataset (see Establish_Connected_Dataset) statement prior to its use here, and the actual element location value is defined in the column within your_dataset_name called header_name_of_column_within_dataset
Assert_Parametrized=<!--The following provides for comparing an actual value as per value1 against a reference value value2 and then verifying  the associated requirement which is fetched from the appropriate dataset returning a Passed or Failed against it-->\\n<assert value1="$getData('your_dataset_name1','header_name_of_column_within_dataset')" op="comparator value of your choice" value2="$getData('your_dataset_name2','header_name_of_column_within_dataset')" else="L2:Expected: $getData('your_dataset_name2','header_name_of_column_within_dataset') Found:$addTagCheck('$getData('your_requirements_dataset_name1','header_name_of_column_within_dataset')','Failed','mmm')" passed="$addTagCheck('$getData('your_requirements_dataset_name','header_name_of_column_within_dataset')','Passed','mmm')"/>@tooltip:Assert_Parametrized - The following provides for comparing an actual value as per value1 against a reference value value2 and then verifying  the associated requirement which is fetched from the appropriate dataset returning a Passed or Failed against it
Decrement_statement=<action code="$decrement('countVar')"/>\\n@tooltip: Decrement_Statement - This is used to Decrement the associated performance counter by one
GotoTrans_statement=<action code="$gotoTrans('new state','new transition')" comment=""/>\\n@tooltip: GotoTrans - This is used to go to a target state and to the particular transition of the target state
If_action_statement=<if value1="" op="" value2="" comment="">\\n\\t<action code=""/>\\n</if>\\n@tooltip: If_action_statement - This is used to make sure certain conditions are met before executing an action statement
If_assert_statement=<if value1="" op="" value2="" comment="">\\n\\t<assert value1="" op="eq" value2="" passed=" $addTagCheck('PriorityLevel:RequirementID','Pass','mmm')"/>\\n</if>\\n@tooltip: If_assert_statement - This is used to make sure certain conditions are met before executing an assert statement
If_log_statement=<if value1="" op="" value2="">\\n\\t<log level="" message=""/>\\n\\t<action code=""/>\\n</if>\\n@tooltip: If_log_statement - This is used to make sure certain conditions are met before logging a message
If_log_action_statement=<if value1="" op="" value2="" comment="">\\n\\t<log level="" message=""/>\\n\\t<action code=""/>\\n</if>\\n@tooltip: If_log_action_statement - This is used to make sure certain conditions are met before logging a message and executing an action statement
If_log_assert_statement=<if value1="" op="" value2=""comment="">\\n\\t<log level="" message=""/>\\n\\t<assert value1="" op="" value2="" passed="  $addTagCheck('PriorityLevel:RequirementID','Pass','mmm')" comment=""/>\\n</if>\\n@tooltip: If_log_assert_statement - This is used to make sure certain conditions are met before logging a message and executing an assert statement
Increment_statement=<action code="$increment('countVar')"/>\\n@tooltip: Increment_Statement - This is used to Increment the associated performance counter by one
Log_debug_statement=<log level="debug" message=""/>\\n@tooltip: Log_debug_Statement - This is used to log a debug message
Log_normal_statement=<log level="" message=""/>\\n@tooltip: Log_normal_Statement - This is used to log a normal message
MBT_start_Script=<!--The following provides for code to execute once only at the start of a model-->\\n<script type="MBT_start">\\n<!--add you code here-->\\n\\t</script>\\n@tooltip: MTB_start_Script - The following provides for code to execute once only at the start of a model
ReadMe=<!--\\n\\tModel Name:\\n\\tPurpose:\\n\\tCreated By:\\n\\tCreated Date and Modification Dates:\\n\\tRequirement Document:\\n\\tActive Issues (as of date):\\n\\tPre-requisites/Dependencies:\\n\\tKnown Limitations and Omissions:\\n\\tNotes:\\n-->@tooltip: ReadMe template
Sleep_Parameterized=<!--The following provides for a sleep statement where the value of the sleep time in ms is obtained from a dataset your_dataset_name, which should have been declared with a dataset (see Establish_Connected_Dataset) statement prior to its use here, and the actual sleep ms is defined in the column within your_filename called header_name_of_column_within_dataset-->\\n<action code="$sleep('$getData('your_dataset_name','header_name_of_column_within_dataset')')"/>\\n@tooltip:Sleep_Parameterized - This provides for a sleep statement where the value of the sleep time in ms is obtained from a dataset your_dataset_name, which should have been declared with a dataset (see Establish_Connected_Dataset) statement prior to its use here, and the actual sleep ms is defined in the column within your_filename called header_name_of_column_within_dataset
SnapScreen_On_Error=<!--The following provides for capturing screen shot of the AUT GUI at the point at which an error has occurred-->\\n<script type="onError">\\n\\t<action code="$snapScreen()"/>\\n</script>@tooltip:SnapScreen_On_Error - The following provides for capturing screen shot of the AUT GUI at the point at which an error has occurred
SnapScreen_On_Exception=<!--The following provides for capturing screen shot of the AUT GUI at the point at which an exception is thrown-->\\n<script type="onException">\\n\\t<action code="$snapScreen()"/>\\n</script>@tooltip:SnapScreen_On_Exception - The following provides for capturing screen shot of the AUT GUI at the point at which an exception is thrown
SnapScreen_and_Trace_On_Error=<!--The following provides for capturing in a message log file the number of steps 'n', you need to enter a value for n, to the point at which an error has occurred and take a snapscreen of the AUT GUI-->\\n<script type="onError">\\n\\t<log message="$trace('n')"/>\\n</script>\\n<script type="onError">\\n\\t<action code="$snapScreen()"/>\\n</script>@tooltip: SnapScreen_and_Trace_On_Error - The following provides for capturing in a message log file the number of steps 'n', you need to enter a value for n, to the point at which an error has occurred and take a snapscreen of the AUT GUI
SnapScreen_and_Trace_On_Exception=<!--The following provides for capturing in a message log file the number of steps 'n', you need to enter a value for n, to the point at which an exception is thrown plus take a snapscreen of the AUT GUI-->\\n<script type="onException">\\n\\t<log message="$trace('n')"/>\\n</script>\\n<script type="onException">\\n\\t<action code="$snapScreen()"/>\\n</script>@tooltip:SnapScreen_and_Trace_On_Exception - The following provides for capturing in a message log file the number of steps 'n', you need to enter a value for n, to the point at which an exception is thrown plus take a snapscreen of the AUT GUI
Trace_On_Error=<!--The following provides for capturing in a message log file the number of steps 'n', you need to enter a value for n, to the point at which an error has occurred-->\\n<script type="onError">\\n\\t<log message="$trace('n')"/>\\n</script>@tooltip:Trace_On_Error - The following provides for capturing in a message log file the number of steps 'n', you need to enter a value for n, to the point at which an error has occurred
Trace_On_Exception=<!--The following provides for capturing in a message log file the number of steps 'n', you need to enter a value for n, to the point at which an exception is thrown-->\\n<script type="onException">\\n\\t<log message="$trace('n')"/>\\n</script>@tooltip: Trace_On_Exception -The following provides for capturing in a message log file the number of steps 'n', you need to enter a value for n, to the point at which an exception is thrown
Type_Parametrized=<!--The following provides for a Type action where the value of the location of the element being defined by ID or Xpath or other such means as class etc. is obtained from a dataset your_dataset_name, which should have been declared with a dataset (see Establish_Connected_Dataset) statement prior to its use here, and the actual element location value is defined in the column within your_dataset_name called header_name_of_column_within_dataset-->\\n<action code="$type('$getData('your_dataset_name','header_name_of_column_within_dataset')','$getData('your_dataset_name2','header_name_of_column_within_dataset')')"/>\\n@tooltip:Type_Parameterized - The following provides for a Type action where the value of the location of the element being defined by ID or Xpath or other such means as class etc. is obtained from a dataset your_dataset_name, which should have been declared with a dataset (see Establish_Connected_Dataset) statement prior to its use here, and the actual element location value is defined in the column within your_dataset_name called header_name_of_column_within_dataset




